{"version":3,"file":"daterange-filter.component.js","sourceRoot":"","sources":["../../../../../src/ng2-smart-table/components/filter/filter-types/daterange-filter.component.ts"],"names":[],"mappings":"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","sourcesContent":["import { Component, OnInit, Input } from '@angular/core';\nimport { FormControl, FormGroup, FormBuilder, Validators } from '@angular/forms';\n\nimport { IMyDateRangeModel, IMyDateRange, IMyDrpOptions } from 'mydaterangepicker'\n\nimport { DefaultFilter } from './default-filter';\nimport 'rxjs/add/operator/distinctUntilChanged';\nimport 'rxjs/add/operator/debounceTime';\nimport 'rxjs/add/operator/skip';\n\n\n@Component({\n  selector: 'daterange-filter',\n  template: `\n    <form [formGroup]=\"dateRange\" novalidate>\n      <my-date-range-picker name=\"mydaterange\"\n                            [options]=\"myDateRangePickerOptions\"\n                            [ngClass]=\"inputClass\"\n        formControlName=\"myDateRange\"></my-date-range-picker>\n    </form>\n  `,\n  styles: [`\n    form {\n      height: 28px;\n    }\n  `]\n})\nexport class DateRangeFilterComponent extends DefaultFilter implements OnInit {\n\n  public dateRange: FormGroup;\n  public rangePickerModel: Object;\n  public myDateRangePickerOptions: IMyDrpOptions = {\n    height: '26px',\n    width: '185px',\n    showClearBtn: false,\n    showApplyBtn: false,\n    selectionTxtFontSize: '.875em',\n  };\n  private searchDate: any;\n\n  // custom startKey and endKey\n  private startKey: string;\n  private endKey: string;\n\n  get query(): any[] {\n    return this.searchDate;\n  }\n\n  @Input()\n  set query(value: any[]) {\n\n    if (!Array.isArray(value)) { value = [] }\n    else {\n\n      let date: IMyDateRange = {\n        beginDate: {\n          year: new Date().getFullYear(),\n          month: new Date().getMonth() + 1,\n          day: new Date().getDate()\n        },\n        endDate: {\n          year: new Date().getFullYear(),\n          month: new Date().getMonth() + 1,\n          day: new Date().getDate(),\n        }\n      };\n\n      value.forEach(e => {\n        let search = e.search || new Date();\n\n        if (e.field === this.startKey) {\n          date.beginDate = {\n            year: new Date(search).getFullYear(),\n            month: new Date(search).getMonth() + 1,\n            day: new Date(search).getDate()\n          }\n        }\n        if (e.field === this.endKey) {\n          date.beginDate = {\n            year: new Date(search).getFullYear(),\n            month: new Date(search).getMonth() + 1,\n            day: new Date(search).getDate()\n          }\n        }\n      });\n      this.rangePickerModel = date;\n    }\n\n    this.searchDate = value;\n  }\n\n  constructor(private formBuilder: FormBuilder) {\n    super();\n    this.startKey = this.column.getFilterConfig().startKey || 'fromDate';\n    this.endKey = this.column.getFilterConfig().endKey || 'toDate';\n  }\n\n  ngOnInit() {\n    this.dateRange = this.formBuilder.group({\n      // Empty string means no initial value. Can be also specific date range for example:\n      // {beginDate: {year: 2018, month: 10, day: 9}, endDate: {year: 2018, month: 10, day: 19}}\n      // which sets this date range to initial value. It is also possible to set initial\n      // value using the selDateRange attribute.\n\n      myDateRange: [this.rangePickerModel, Validators.required]\n    });\n    this.dateRange.controls['myDateRange'].valueChanges\n      .distinctUntilChanged()\n      .debounceTime(this.delay)\n      // .skip(1)\n      .map((data: IMyDateRangeModel) => {\n        let filters = [{\n          field: this.startKey,\n          search: '',\n        }, {\n          field: this.endKey,\n          search: '',\n        }];\n\n        if (data) {\n          let fromDate = data.formatted.split(' - ')[0];\n          let toDate = data.formatted.split(' - ')[1];\n          filters.forEach(filter => {\n            if (filter.field == this.startKey) { filter.search = fromDate };\n            if (filter.field == this.endKey) { filter.search = toDate };\n          })\n        }\n        return filters;\n      })\n      .subscribe((filters) => {\n        this.query = filters;\n        this.setCustomFilter();\n      });\n  }\n}\n"]}